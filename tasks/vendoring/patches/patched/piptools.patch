diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
index eccbf36..fd8ecdd 100644
--- a/pipenv/patched/piptools/_compat/__init__.py
+++ b/pipenv/patched/piptools/_compat/__init__.py
@@ -11,6 +11,7 @@ from .pip_compat import (
     FormatControl,
     InstallationCandidate,
     InstallCommand,
+    InstallationError,
     InstallRequirement,
     Link,
     PackageFinder,
@@ -18,6 +19,8 @@ from .pip_compat import (
     RequirementSet,
     RequirementTracker,
     Resolver,
+    SafeFileCache,
+    VcsSupport,
     Wheel,
     WheelCache,
     cmdoptions,
@@ -29,6 +32,7 @@ from .pip_compat import (
     is_vcs_url,
     parse_requirements,
     path_to_url,
+    pip_version,
     stdlib_pkgs,
     url_to_path,
     user_cache_dir,
diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
index 67da307..765bd49 100644
--- a/pipenv/patched/piptools/_compat/pip_compat.py
+++ b/pipenv/patched/piptools/_compat/pip_compat.py
@@ -1,26 +1,24 @@
 # -*- coding=utf-8 -*-
 from __future__ import absolute_import
-
 import importlib
-from contextlib import contextmanager
-
-import pip
-from pip._vendor.packaging.version import parse as parse_version
-
-PIP_VERSION = tuple(map(int, parse_version(pip.__version__).base_version.split(".")))
+import os
+from appdirs import user_cache_dir
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
+import pip_shims.shims
+from pip_shims.models import ShimmedPathCollection, ImportTypes
 
-try:
-    from pip._internal.req.req_tracker import RequirementTracker
-except ImportError:
+InstallationCandidate = ShimmedPathCollection("InstallationCandidate", ImportTypes.CLASS)
+InstallationCandidate.create_path("models.candidate", "18.0", "9999")
+InstallationCandidate.create_path("index", "7.0.3", "10.9.9")
 
-    @contextmanager
-    def RequirementTracker():
-        yield
+PIP_VERSION = tuple(map(int, pip_shims.shims.parsed_pip_version.parsed_version.base_version.split(".")))
 
+RequirementTracker = pip_shims.shims.RequirementTracker
 
 def do_import(module_path, subimport=None, old_path=None):
     old_path = old_path or module_path
-    prefixes = ["pip._internal", "pip"]
+    pip_path = os.environ.get("PIP_SHIMS_BASE_MODULE", "pip")
+    prefixes = ["{}._internal".format(pip_path), pip_path]
     paths = [module_path, old_path]
     search_order = [
         "{0}.{1}".format(p, pth) for p in prefixes for pth in paths if pth is not None
@@ -37,31 +35,29 @@ def do_import(module_path, subimport=None, old_path=None):
             return getattr(imported, package)
 
 
-InstallRequirement = do_import("req.req_install", "InstallRequirement")
-InstallationCandidate = do_import(
-    "models.candidate", "InstallationCandidate", old_path="index"
-)
-parse_requirements = do_import("req.req_file", "parse_requirements")
-RequirementSet = do_import("req.req_set", "RequirementSet")
-user_cache_dir = do_import("utils.appdirs", "user_cache_dir")
-FAVORITE_HASH = do_import("utils.hashes", "FAVORITE_HASH")
-path_to_url = do_import("utils.urls", "path_to_url", old_path="download")
-url_to_path = do_import("utils.urls", "url_to_path", old_path="download")
-PackageFinder = do_import("index.package_finder", "PackageFinder", old_path="index")
-FormatControl = do_import("models.format_control", "FormatControl", old_path="index")
-InstallCommand = do_import("commands.install", "InstallCommand")
-Wheel = do_import("wheel", "Wheel")
-cmdoptions = do_import("cli.cmdoptions", old_path="cmdoptions")
-get_installed_distributions = do_import(
-    "utils.misc", "get_installed_distributions", old_path="utils"
-)
-PyPI = do_import("models.index", "PyPI")
-stdlib_pkgs = do_import("utils.compat", "stdlib_pkgs", old_path="compat")
-DEV_PKGS = do_import("commands.freeze", "DEV_PKGS")
-Link = do_import("models.link", "Link", old_path="index")
+InstallRequirement = pip_shims.shims.InstallRequirement
+InstallationError = pip_shims.shims.InstallationError
+parse_requirements = pip_shims.shims.parse_requirements
+RequirementSet = pip_shims.shims.RequirementSet
+SafeFileCache = pip_shims.shims.SafeFileCache
+FAVORITE_HASH = pip_shims.shims.FAVORITE_HASH
+path_to_url = pip_shims.shims.path_to_url
+url_to_path = pip_shims.shims.url_to_path
+PackageFinder = pip_shims.shims.PackageFinder
+FormatControl = pip_shims.shims.FormatControl
+InstallCommand = pip_shims.shims.InstallCommand
+Wheel = pip_shims.shims.Wheel
+cmdoptions = pip_shims.shims.cmdoptions
+get_installed_distributions = pip_shims.shims.get_installed_distributions
+PyPI = pip_shims.shims.PyPI
+stdlib_pkgs = pip_shims.shims.stdlib_pkgs
+DEV_PKGS = pip_shims.shims.DEV_PKGS
+Link = pip_shims.shims.Link
 Session = do_import("_vendor.requests.sessions", "Session")
-Resolver = do_import("legacy_resolve", "Resolver", old_path="resolve")
-WheelCache = do_import("cache", "WheelCache", old_path="wheel")
+Resolver = pip_shims.shims.Resolver
+VcsSupport = pip_shims.shims.VcsSupport
+WheelCache = pip_shims.shims.WheelCache
+pip_version = pip_shims.shims.pip_version
 
 # pip 18.1 has refactored InstallRequirement constructors use by pip-tools.
 if PIP_VERSION < (18, 1):
diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
index fb66cf3..bb199f6 100644
--- a/pipenv/patched/piptools/locations.py
+++ b/pipenv/patched/piptools/locations.py
@@ -5,7 +5,10 @@ from ._compat import user_cache_dir
 from .click import secho
 
 # The user_cache_dir helper comes straight from pip itself
-CACHE_DIR = user_cache_dir("pip-tools")
+try:
+    from pipenv.environments import PIPENV_CACHE_DIR as CACHE_DIR
+except ImportError:
+    CACHE_DIR = user_cache_dir("pipenv")
 
 # NOTE
 # We used to store the cache dir under ~/.pip-tools, which is not the
diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
index f389784..c1bcf9d 100644
--- a/pipenv/patched/piptools/repositories/local.py
+++ b/pipenv/patched/piptools/repositories/local.py
@@ -61,7 +61,8 @@ class LocalRequirementsRepository(BaseRepository):
         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
             project, version, _ = as_tuple(existing_pin)
             return make_install_requirement(
-                project, version, ireq.extras, constraint=ireq.constraint
+                project, version, ireq.extras, ireq.markers,
+                constraint=ireq.constraint
             )
         else:
             return self.repository.find_best_match(ireq, prereleases)
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index acbd680..13378ae 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -2,21 +2,29 @@
 from __future__ import absolute_import, division, print_function, unicode_literals
 
 import collections
+import copy
 import hashlib
 import os
 from contextlib import contextmanager
 from functools import partial
 from shutil import rmtree
 
+from packaging.requirements import Requirement
+from packaging.specifiers import Specifier, SpecifierSet
+
 from .._compat import (
     FAVORITE_HASH,
     PIP_VERSION,
+    InstallationError,
+    InstallRequirement,
     Link,
     PyPI,
     RequirementSet,
     RequirementTracker,
     Resolver as PipResolver,
+    SafeFileCache,
     TemporaryDirectory,
+    VcsSupport,
     Wheel,
     WheelCache,
     contextlib,
@@ -24,6 +32,7 @@ from .._compat import (
     is_file_url,
     is_vcs_url,
     path_to_url,
+    pip_version,
     url_to_path,
 )
 from ..cache import CACHE_DIR
@@ -31,6 +40,8 @@ from ..click import progressbar
 from ..exceptions import NoCandidateFound
 from ..logging import log
 from ..utils import (
+    dedup,
+    clean_requires_python,
     create_install_command,
     fs_str,
     is_pinned_requirement,
@@ -40,10 +51,50 @@ from ..utils import (
 )
 from .base import BaseRepository
 
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pip")
 FILE_CHUNK_SIZE = 4096
 FileStream = collections.namedtuple("FileStream", "stream size")
 
 
+class HashCache(SafeFileCache):
+    """Caches hashes of PyPI artifacts so we do not need to re-download them
+
+    Hashes are only cached when the URL appears to contain a hash in it and the cache key includes
+    the hash value returned from the server). This ought to avoid ssues where the location on the
+    server changes."""
+    def __init__(self, *args, **kwargs):
+        session = kwargs.pop('session')
+        self.session = session
+        kwargs.setdefault('directory', os.path.join(CACHE_DIR, 'hash-cache'))
+        super(HashCache, self).__init__(*args, **kwargs)
+
+    def get_hash(self, location):
+        # if there is no location hash (i.e., md5 / sha256 / etc) we on't want to store it
+        hash_value = None
+        vcs = VcsSupport()
+        orig_scheme = location.scheme
+        new_location = copy.deepcopy(location)
+        if orig_scheme in vcs.all_schemes:
+            new_location.url = new_location.url.split("+", 1)[-1]
+        can_hash = new_location.hash
+        if can_hash:
+            # hash url WITH fragment
+            hash_value = self.get(new_location.url)
+        if not hash_value:
+            hash_value = self._get_file_hash(new_location) if not new_location.url.startswith("ssh") else None
+            hash_value = hash_value.encode('utf8') if hash_value else None
+        if can_hash:
+            self.set(new_location.url, hash_value)
+        return hash_value.decode('utf8') if hash_value else None
+
+    def _get_file_hash(self, location):
+        h = hashlib.new(FAVORITE_HASH)
+        with open_local_or_remote_file(location, self.session) as (fp, size):
+            for chunk in iter(lambda: fp.read(8096), b""):
+                h.update(chunk)
+        return ":".join([FAVORITE_HASH, h.hexdigest()])
+
+
 class PyPIRepository(BaseRepository):
     DEFAULT_INDEX_URL = PyPI.simple_url
 
@@ -54,8 +105,9 @@ class PyPIRepository(BaseRepository):
     changed/configured on the Finder.
     """
 
-    def __init__(self, pip_args, build_isolation=False):
+    def __init__(self, pip_args, session=None, build_isolation=False, use_json=False):
         self.build_isolation = build_isolation
+        self.use_json = use_json
 
         # Use pip's parser for pip.conf management and defaults.
         # General options (find_links, index_url, extra_index_url, trusted_host,
@@ -63,7 +115,9 @@ class PyPIRepository(BaseRepository):
         command = create_install_command()
         self.options, _ = command.parse_args(pip_args)
 
-        self.session = command._build_session(self.options)
+        if session is None:
+            session = command._build_session(self.options)
+        self.session = session
         self.finder = command._build_package_finder(
             options=self.options, session=self.session
         )
@@ -78,6 +132,10 @@ class PyPIRepository(BaseRepository):
         # of all secondary dependencies for the given requirement, so we
         # only have to go to disk once for each requirement
         self._dependencies_cache = {}
+        self._json_dep_cache = {}
+
+        # stores *full* path + fragment => sha256
+        self._hash_cache = HashCache(session=session)
 
         # Setup file paths
         self.freshen_build_caches()
@@ -118,13 +176,15 @@ class PyPIRepository(BaseRepository):
         if ireq.editable or is_url_requirement(ireq):
             return ireq  # return itself as the best match
 
-        all_candidates = self.find_all_candidates(ireq.name)
+        all_candidates = clean_requires_python(self.find_all_candidates(ireq.name))
         candidates_by_version = lookup_table(
             all_candidates, key=lambda c: c.version, unique=True
         )
-        matching_versions = ireq.specifier.filter(
-            (candidate.version for candidate in all_candidates), prereleases=prereleases
-        )
+        try:
+            matching_versions = ireq.specifier.filter((candidate.version for candidate in all_candidates),
+                                                      prereleases=prereleases)
+        except TypeError:
+            matching_versions = [candidate.version for candidate in all_candidates]
 
         # Reuses pip's internal candidate sort key to sort
         matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
@@ -153,11 +213,74 @@ class PyPIRepository(BaseRepository):
             best_candidate.project,
             best_candidate.version,
             ireq.extras,
+            ireq.markers,
             constraint=ireq.constraint,
         )
 
+    def get_dependencies(self, ireq):
+        json_results = set()
+
+        if self.use_json:
+            try:
+                json_results = self.get_json_dependencies(ireq)
+            except TypeError:
+                json_results = set()
+
+        legacy_results = self.get_legacy_dependencies(ireq)
+        json_results.update(legacy_results)
+
+        return json_results
+
+    def get_json_dependencies(self, ireq):
+
+        if not (is_pinned_requirement(ireq)):
+            raise TypeError('Expected pinned InstallRequirement, got {}'.format(ireq))
+
+        def gen(ireq):
+            if self.DEFAULT_INDEX_URL not in self.finder.index_urls:
+                return
+
+            url = 'https://pypi.org/pypi/{0}/json'.format(ireq.req.name)
+            releases = self.session.get(url).json()['releases']
+
+            matches = [
+                r for r in releases
+                if '=={0}'.format(r) == str(ireq.req.specifier)
+            ]
+            if not matches:
+                return
+
+            release_requires = self.session.get(
+                'https://pypi.org/pypi/{0}/{1}/json'.format(
+                    ireq.req.name, matches[0],
+                ),
+            ).json()
+            try:
+                requires_dist = release_requires['info']['requires_dist']
+            except KeyError:
+                return
+
+            for requires in requires_dist:
+                i = InstallRequirement.from_line(requires)
+                if 'extra' not in repr(i.markers):
+                    yield i
+
+        try:
+            if ireq not in self._json_dep_cache:
+                self._json_dep_cache[ireq] = [g for g in gen(ireq)]
+
+            return set(self._json_dep_cache[ireq])
+        except Exception:
+            return set()
+
     def resolve_reqs(self, download_dir, ireq, wheel_cache):
         results = None
+        ireq.isolated = self.build_isolation
+        ireq._wheel_cache = wheel_cache
+        if ireq and not ireq.link:
+            ireq.populate_link(self.finder, False, False)
+        if ireq.link and not ireq.link.is_wheel:
+            ireq.ensure_has_source_dir(self.source_dir)
 
         if PIP_VERSION < (10,):
             reqset = RequirementSet(
@@ -166,11 +289,13 @@ class PyPIRepository(BaseRepository):
                 download_dir=download_dir,
                 wheel_download_dir=self._wheel_download_dir,
                 session=self.session,
+                ignore_installed=True,
+                ignore_compatibility=False,
                 wheel_cache=wheel_cache,
             )
-            results = reqset._prepare_file(self.finder, ireq)
+            results = reqset._prepare_file(self.finder, ireq, ignore_requires_python=True)
         else:
-            from pip._internal.operations.prepare import RequirementPreparer
+            from pip_shims.shims import RequirementPreparer
 
             preparer_kwargs = {
                 "build_dir": self.build_dir,
@@ -186,21 +311,24 @@ class PyPIRepository(BaseRepository):
                 "upgrade_strategy": "to-satisfy-only",
                 "force_reinstall": False,
                 "ignore_dependencies": False,
-                "ignore_requires_python": False,
+                "ignore_requires_python": True,
                 "ignore_installed": True,
                 "use_user_site": False,
+                "ignore_compatibility": False,
+                "use_pep517": True,
             }
             make_install_req_kwargs = {"isolated": False, "wheel_cache": wheel_cache}
 
             if PIP_VERSION < (19, 3):
                 resolver_kwargs.update(**make_install_req_kwargs)
             else:
-                from pip._internal.req.constructors import install_req_from_req_string
+                from pipenv.vendor.pip_shims.shims import install_req_from_req_string
 
                 make_install_req = partial(
                     install_req_from_req_string, **make_install_req_kwargs
                 )
                 resolver_kwargs["make_install_req"] = make_install_req
+                del resolver_kwargs["use_pep517"]
 
             if PIP_VERSION >= (20,):
                 preparer_kwargs["session"] = self.session
@@ -208,6 +336,7 @@ class PyPIRepository(BaseRepository):
 
             resolver = None
             preparer = None
+            reqset = None
             with RequirementTracker() as req_tracker:
                 # Pip 18 uses a requirement tracker to prevent fork bombs
                 if req_tracker:
@@ -216,7 +345,6 @@ class PyPIRepository(BaseRepository):
                 resolver_kwargs["preparer"] = preparer
                 reqset = RequirementSet()
                 ireq.is_direct = True
-                reqset.add_requirement(ireq)
 
                 resolver = PipResolver(**resolver_kwargs)
                 require_hashes = False
@@ -225,12 +353,16 @@ class PyPIRepository(BaseRepository):
                     results = resolver._resolve_one(reqset, ireq)
                 else:
                     results = resolver._resolve_one(reqset, ireq, require_hashes)
+        try:
+            reqset.cleanup_files()
+        except (AttributeError, OSError):
+            pass
 
-                reqset.cleanup_files()
+        results = set(results) if results else set()
 
-        return set(results)
+        return results, ireq
 
-    def get_dependencies(self, ireq):
+    def get_legacy_dependencies(self, ireq):
         """
         Given a pinned, URL, or editable InstallRequirement, returns a set of
         dependencies (also InstallRequirements, but not necessarily pinned).
@@ -265,9 +397,8 @@ class PyPIRepository(BaseRepository):
             wheel_cache = WheelCache(CACHE_DIR, self.options.format_control)
             prev_tracker = os.environ.get("PIP_REQ_TRACKER")
             try:
-                self._dependencies_cache[ireq] = self.resolve_reqs(
-                    download_dir, ireq, wheel_cache
-                )
+                results, ireq = self.resolve_reqs(download_dir, ireq, wheel_cache)
+                self._dependencies_cache[ireq] = results
             finally:
                 if "PIP_REQ_TRACKER" in os.environ:
                     if prev_tracker:
@@ -305,7 +436,7 @@ class PyPIRepository(BaseRepository):
                     cached_link = Link(path_to_url(cached_path))
                 else:
                     cached_link = link
-                return {self._get_file_hash(cached_link)}
+                return {self._hash_cache._get_file_hash(cached_link)}
 
         if not is_pinned_requirement(ireq):
             raise TypeError("Expected pinned requirement, got {}".format(ireq))
@@ -313,12 +444,10 @@ class PyPIRepository(BaseRepository):
         # We need to get all of the candidates that match our current version
         # pin, these will represent all of the files that could possibly
         # satisfy this constraint.
-        all_candidates = self.find_all_candidates(ireq.name)
-        candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version)
-        matching_versions = list(
-            ireq.specifier.filter((candidate.version for candidate in all_candidates))
+        matching_candidates = (
+            c for c in clean_requires_python(self.find_all_candidates(ireq.name))
+            if c.version in ireq.specifier
         )
-        matching_candidates = candidates_by_version[matching_versions[0]]
 
         log.debug("  {}".format(ireq.name))
 
@@ -328,30 +457,11 @@ class PyPIRepository(BaseRepository):
             return candidate.link
 
         return {
-            self._get_file_hash(get_candidate_link(candidate))
-            for candidate in matching_candidates
+            h for h in
+            map(lambda c: self._hash_cache.get_hash(get_candidate_link(c)), matching_candidates)
+            if h is not None
         }
 
-    def _get_file_hash(self, link):
-        log.debug("    Hashing {}".format(link.url_without_fragment))
-        h = hashlib.new(FAVORITE_HASH)
-        with open_local_or_remote_file(link, self.session) as f:
-            # Chunks to iterate
-            chunks = iter(lambda: f.stream.read(FILE_CHUNK_SIZE), b"")
-
-            # Choose a context manager depending on verbosity
-            if log.verbosity >= 1:
-                iter_length = f.size / FILE_CHUNK_SIZE if f.size else None
-                context_manager = progressbar(chunks, length=iter_length, label="  ")
-            else:
-                context_manager = contextlib.nullcontext(chunks)
-
-            # Iterate over the chosen context manager
-            with context_manager as bar:
-                for chunk in bar:
-                    h.update(chunk)
-        return ":".join([FAVORITE_HASH, h.hexdigest()])
-
     @contextmanager
     def allow_all_wheels(self):
         """
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index fc53f18..7e856fe 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -6,6 +6,9 @@ import os
 from functools import partial
 from itertools import chain, count
 
+from pipenv.vendor.requirementslib.models.markers import normalize_marker_str
+from packaging.markers import Marker
+
 from . import click
 from ._compat import install_req_from_line
 from .cache import DependencyCache
@@ -34,6 +37,7 @@ class RequirementSummary(object):
         self.req = ireq.req
         self.key = key_from_req(ireq.req)
         self.extras = str(sorted(ireq.extras))
+        self.markers = ireq.markers
         self.specifier = str(ireq.specifier)
 
     def __eq__(self, other):
@@ -63,6 +67,17 @@ def combine_install_requirements(ireqs):
         # NOTE we may be losing some info on dropped reqs here
         combined_ireq.req.specifier &= ireq.req.specifier
         combined_ireq.constraint &= ireq.constraint
+        if ireq.markers and not combined_ireq.markers:
+            combined_ireq.markers = copy.deepcopy(ireq.markers)
+        elif ireq.markers and combined_ireq.markers:
+            _markers = []  # type: List[Marker]
+            for marker in [ireq.markers, combined_ireq.markers]:
+                if isinstance(marker, str):
+                    _markers.append(Marker(marker))
+                else:
+                    _markers.append(marker)
+            marker_str = " and ".join([normalize_marker_str(m) for m in _markers if m])
+            combined_ireq.markers = Marker(marker_str)
         # Return a sorted, de-duped tuple of extras
         combined_ireq.extras = tuple(
             sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras)))
@@ -335,10 +350,19 @@ class Resolver(object):
         Editable requirements will never be looked up, as they may have
         changed at any time.
         """
-        if ireq.editable or is_url_requirement(ireq):
+        if ireq.editable or (is_url_requirement(ireq) and not ireq.link.is_wheel):
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
             return
+
+        # fix our malformed extras
+        if ireq.extras:
+            if getattr(ireq, "extra", None):
+                if ireq.extras:
+                    ireq.extras.extend(ireq.extra)
+                else:
+                    ireq.extras = ireq.extra
+
         elif not is_pinned_requirement(ireq):
             raise TypeError(
                 "Expected pinned or editable requirement, got {}".format(ireq)
@@ -356,7 +380,7 @@ class Resolver(object):
                 fg="yellow",
             )
             dependencies = self.repository.get_dependencies(ireq)
-            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
+            self.dependency_cache[ireq] = sorted(set(format_requirement(ireq) for ireq in dependencies))
 
         # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
         dependency_strings = self.dependency_cache[ireq]
@@ -372,7 +396,8 @@ class Resolver(object):
             )
 
     def reverse_dependencies(self, ireqs):
+        is_non_wheel_url = lambda r: is_url_requirement(r) and not r.link.is_wheel
         non_editable = [
-            ireq for ireq in ireqs if not (ireq.editable or is_url_requirement(ireq))
+            ireq for ireq in ireqs if not (ireq.editable or is_non_wheel_url(ireq))
         ]
         return self.dependency_cache.reverse_dependencies(non_editable)
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 8727f1e..c9f53f7 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -1,6 +1,7 @@
 # coding: utf-8
 from __future__ import absolute_import, division, print_function, unicode_literals
 
+import os
 import sys
 from collections import OrderedDict
 from itertools import chain, groupby
@@ -8,6 +9,10 @@ from itertools import chain, groupby
 import six
 from click.utils import LazyFile
 from six.moves import shlex_quote
+from pipenv.vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
+from pipenv.vendor.packaging.version import Version, InvalidVersion, parse as parse_version
+from pipenv.vendor.packaging.markers import Marker, Op, Value, Variable
+
 
 from ._compat import PIP_VERSION, InstallCommand, install_req_from_line
 from .click import style
@@ -23,6 +28,70 @@ COMPILE_EXCLUDE_OPTIONS = {
 }
 
 
+def simplify_markers(ireq):
+    """simplify_markers "This code cleans up markers for a specific :class:`~InstallRequirement`"
+
+    Clean and deduplicate markers.
+
+    :param ireq: An InstallRequirement to clean
+    :type ireq: :class:`~pip._internal.req.req_install.InstallRequirement`
+    :return: An InstallRequirement with cleaned Markers
+    :rtype: :class:`~pip._internal.req.req_install.InstallRequirement`
+    """
+
+    if not getattr(ireq, 'markers', None):
+        return ireq
+    markers = ireq.markers
+    marker_list = []
+    if isinstance(markers, six.string_types):
+        if ';' in markers:
+            markers = [Marker(m_str.strip()) for m_str in markers.split(';')]
+        else:
+            markers = Marker(markers)
+    for m in markers._markers:
+        _single_marker = []
+        if isinstance(m[0], six.string_types):
+            continue
+        if not isinstance(m[0], (list, tuple)):
+            marker_list.append(''.join([_piece.serialize() for _piece in m]))
+            continue
+        for _marker_part in m:
+            if isinstance(_marker_part, six.string_types):
+                _single_marker.append(_marker_part)
+                continue
+            _single_marker.append(''.join([_piece.serialize() for _piece in _marker_part]))
+        _single_marker = [_m.strip() for _m in _single_marker]
+        marker_list.append(tuple(_single_marker,))
+    marker_str = ' and '.join(list(dedup(tuple(marker_list,)))) if marker_list else ''
+    new_markers = Marker(marker_str)
+    ireq.markers = new_markers
+    new_ireq = install_req_from_line(format_requirement(ireq))
+    if ireq.constraint:
+        new_ireq.constraint = ireq.constraint
+    return new_ireq
+
+
+def clean_requires_python(candidates):
+    """Get a cleaned list of all the candidates with valid specifiers in the `requires_python` attributes."""
+    all_candidates = []
+    py_version = parse_version(os.environ.get('PIP_PYTHON_VERSION', '.'.join(map(str, sys.version_info[:3]))))
+    for c in candidates:
+        if getattr(c, "requires_python", None):
+            # Old specifications had people setting this to single digits
+            # which is effectively the same as '>=digit,<digit+1'
+            if len(c.requires_python) == 1 and c.requires_python in ("2", "3"):
+                c.requires_python = '>={0},<{1!s}'.format(c.requires_python, int(c.requires_python) + 1)
+            try:
+                specifierset = SpecifierSet(c.requires_python)
+            except InvalidSpecifier:
+                continue
+            else:
+                if not specifierset.contains(py_version):
+                    continue
+        all_candidates.append(c)
+    return all_candidates
+
+
 def key_from_ireq(ireq):
     """Get a standardized key for an InstallRequirement."""
     if ireq.req is None and ireq.link is not None:
@@ -48,16 +117,51 @@ def comment(text):
     return style(text, fg="green")
 
 
-def make_install_requirement(name, version, extras, constraint=False):
+def make_install_requirement(name, version, extras, markers, constraint=False):
     # If no extras are specified, the extras string is blank
     extras_string = ""
     if extras:
         # Sort extras for stability
         extras_string = "[{}]".format(",".join(sorted(extras)))
 
-    return install_req_from_line(
-        str("{}{}=={}".format(name, extras_string, version)), constraint=constraint
-    )
+    if not markers:
+        return install_req_from_line(
+            str('{}{}=={}'.format(name, extras_string, version)),
+            constraint=constraint)
+    else:
+        return install_req_from_line(
+            str('{}{}=={}; {}'.format(name, extras_string, version, str(markers))),
+            constraint=constraint)
+
+
+def _requirement_to_str_lowercase_name(requirement):
+    """
+    Formats a packaging.requirements.Requirement with a lowercase name.
+
+    This is simply a copy of
+    https://github.com/pypa/packaging/blob/16.8/packaging/requirements.py#L109-L124
+    modified to lowercase the dependency name.
+
+    Previously, we were invoking the original Requirement.__str__ method and
+    lowercasing the entire result, which would lowercase the name, *and* other,
+    important stuff that should not be lowercased (such as the marker). See
+    this issue for more information: https://github.com/pypa/pipenv/issues/2113.
+    """
+    parts = [requirement.name.lower()]
+
+    if requirement.extras:
+        parts.append("[{0}]".format(",".join(sorted(requirement.extras))))
+
+    if requirement.specifier:
+        parts.append(str(requirement.specifier))
+
+    if requirement.url:
+        parts.append("@ {0}".format(requirement.url))
+
+    if requirement.marker:
+        parts.append("; {0}".format(requirement.marker))
+
+    return "".join(parts)
 
 
 def is_url_requirement(ireq):
@@ -78,10 +182,10 @@ def format_requirement(ireq, marker=None, hashes=None):
     elif is_url_requirement(ireq):
         line = ireq.link.url
     else:
-        line = str(ireq.req).lower()
+        line = _requirement_to_str_lowercase_name(ireq.req)
 
-    if marker:
-        line = "{} ; {}".format(line, marker)
+    if marker and ';' not in line:
+        line = "{}; {}".format(line, marker)
 
     if hashes:
         for hash_ in sorted(hashes):
